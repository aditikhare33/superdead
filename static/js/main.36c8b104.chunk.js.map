{"version":3,"sources":["audio.js","board.js","index.js"],"names":["Audio","props","state","songs","direction","dir_x","dir_y","song_index","paused","just_started","handleAudio","bind","console","log","prevProps","gameOver","this","setState","e","persist","x","document","getElementById","play","pause","buttons","icon","faVolumeUp","faVolumeMute","push","onClick","autoPlay","loop","class","id","src","type","renderAudioOptions","React","Component","Board","handleEat","handleKeyDown","incrementMove","handleRestartGame","handleGameOver","handleHelp","wd","ht","height","width","apple","Math","floor","random","head","points","timeOut","setTimeout","highscore","needHelp","waitLength","window","addEventListener","points_temp","highscore_temp","wait_temp","code","clear","clearTimeout","head_temp","items","className","index","i","j","output","name","helpScreen","faTimesCircle","font-size","title_parts","renderTitle","title","theme","help","renderHelp","renderGrid","replay_options","renderGameOver","ReactDOM","render"],"mappings":"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","file":"static/js/main.36c8b104.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faVolumeUp} from '@fortawesome/free-solid-svg-icons';\nimport {faVolumeMute} from '@fortawesome/free-solid-svg-icons';\n\n\nclass Audio extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            songs:[\"bg_music.mp3\",\"gameOver.mp3\"],\n            direction: [props.dir_x, props.dir_y],\n            song_index: 0,\n            paused: false,\n            just_started:true,\n        }\n        this.handleAudio = this.handleAudio.bind(this);\n        console.log(\"INITAL PROPS\", props);\n    }\n\n    //since state depends on CHANGING props, use this part of react lifecycle\n    componentDidUpdate(prevProps) {\n        if (prevProps.gameOver !== this.props.gameOver) {\n            this.setState({\n                paused: false,\n                direction: [0, 0],\n                just_started:false,\n            });\n        } else if (prevProps !== this.props) {\n            this.setState({\n                direction: [this.props.dir_x, this.props.dir_y],\n            });\n        }\n    }\n\n    handleAudio(e) {\n        e.persist();\n        const {paused} = this.state;\n        var x = document.getElementById(\"audio\");\n        if (paused) {\n            x.play();\n            this.setState({\n                paused: false,\n            });\n        } else {\n            x.pause();\n            this.setState({\n                paused: true,\n            });\n        }\n        console.log(\"inHandleAudio\");\n    }\n\n    renderAudioOptions() {\n        let buttons = [];\n\n        const {direction, paused, songs, just_started} = this.state;\n\n        //let action = \"pause music\"\n        let icon = <FontAwesomeIcon icon={faVolumeUp} />\n        if (paused) {\n            //action = \"play music\";\n            icon = <FontAwesomeIcon icon={faVolumeMute} />;\n        } \n\n        if (direction[0] !== 0 || direction[1] !== 0) {\n            console.log(\"song\", songs[0]);\n            buttons.push(\n                <button onClick={this.handleAudio}>\n                    <audio\n                        autoPlay\n                        loop\n                        class=\"audio\"\n                        id = \"audio\">\n                            <source \n                                src={songs[0]}\n                                type=\"audio/mp3\" \n                            />\n                            Your browser does not support the audio element.\n                    </audio>\n                    Sound: {icon}\n                </button>\n            );\n        } else if (this.props.gameOver) {\n            console.log(\"song\", songs[1]);\n            buttons.push(\n                <audio \n                    autoPlay\n                    class=\"audio\"\n                    id = \"audio\">\n                    <source \n                        src={songs[1]}\n                        type=\"audio/mp3\" \n                    />\n                    Your browser does not support the audio element.\n                </audio>\n            )\n        }\n        return buttons;\n    } \n    render() {\n        let buttons = this.renderAudioOptions();\n        return (\n            <div id=\"music_player\">\n                {buttons}\n            </div>\n            \n        ); \n    }\n} \nAudio.propTypes = {\n    dir_x: PropTypes.number.isRequired,\n    dir_y: PropTypes.number.isRequired,\n    gameOver: PropTypes.bool.isRequired,\n}\n\nexport default Audio;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Audio from './audio';\nimport './index.css';\n//import StartingScreen from './starting-screen'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import {faQuestion} from '@fortawesome/free-solid-svg-icons';\nimport {faTimesCircle} from '@fortawesome/free-solid-svg-icons';\n\nclass Board extends React.Component {\n    \n    constructor(props) {\n      super(props);\n    \n      this.handleEat = this.handleEat.bind(this);\n      this.handleKeyDown = this.handleKeyDown.bind(this);\n      this.incrementMove = this.incrementMove.bind(this);\n      this.handleRestartGame = this.handleRestartGame.bind(this);\n      this.handleGameOver = this.handleGameOver.bind(this);\n      this.handleHelp = this.handleHelp.bind(this);\n\n      let {wd, ht} = this.props;\n      this.state = {\n          height: ht,\n          width: wd,\n          apple: [Math.floor((Math.random() * wd)), Math.floor((Math.random() * ht))],\n          head: [Math.floor((Math.random() * wd)), Math.floor((Math.random() * ht))],\n          points: 0,\n          direction: [0, 0],\n          timeOut: setTimeout(this.incrementMove, 1000),\n          gameOver: false,\n          highscore: 0,\n          needHelp: false,\n          waitLength: 120,\n        };\n      window.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentDidMount() {\n      //do nothing\n    }\n  \n    handleEat() {\n      if (!this.state.gameOver) {\n        let points_temp = this.state.points;\n        let highscore_temp = this.state.highscore;\n        if (points_temp + 1 >= this.state.highscore) {\n          highscore_temp = points_temp + 1;\n        }\n        let wait_temp = this.state.waitLength;\n        if (wait_temp <= 75) {\n            wait_temp = 76;\n        }\n        console.log(\"ATE\", points_temp+1, \"SPEED:\", wait_temp-1);\n        this.setState({\n          points: points_temp + 1,\n          apple: [Math.floor((Math.random() * this.state.width)),\n                  Math.floor((Math.random() * this.state.height))],\n          highscore: highscore_temp,\n          waitLength: wait_temp - 1, \n        });\n      }\n    }\n  \n    handleKeyDown(e) {\n      if (!this.state.gameOver) {\n        console.log(\"KEY PRESSED\", e.code);\n  \n        let clear = true;\n        let dir_x = 0;\n        let dir_y = 0;\n  \n        if (e.code === 'KeyW' || e.code === \"ArrowUp\") { /*up arrow (w) */ dir_y = -1;  }\n        else if (e.code === 'KeyS' || e.code === \"ArrowDown\") { /* down arrow (s) */ dir_y = 1; }\n        else if (e.code === 'KeyA' || e.code === \"ArrowLeft\") { /* left arrow (a) */ dir_x = -1; }\n        else if (e.code === 'KeyD' || e.code === \"ArrowRight\") { /* right arrow (d) */ dir_x = 1;  } \n        else { clear = false; }\n  \n        if (clear) {\n          clearTimeout(this.state.timeOut);\n          this.setState({\n            direction: [dir_x, dir_y],\n            timeOut: setTimeout(this.incrementMove, 0),\n          });\n        }\n      }\n    }\n  \n    incrementMove() { \n      let head_temp = this.state.head;\n      head_temp = [head_temp[0] + this.state.direction[0], head_temp[1] + this.state.direction[1]];\n      let wait_temp = this.state.waitLength;\n      this.setState({\n        head: head_temp,\n        timeOut: setTimeout(this.incrementMove, wait_temp),\n      });\n\n      const {head, width, height} = this.state;\n      if (head[0] === width ||\n        head[0] <= -1 ||\n        head[1] <= -1 ||\n        head[1] === height) {\n          this.handleGameOver();\n    }\n    \n      if (this.state.apple[0] === this.state.head[0] &&\n          this.state.apple[1] === this.state.head[1]) {\n        this.handleEat();\n      } \n    }\n  \n    handleGameOver() {\n      clearTimeout(this.state.timeOut);\n      this.setState({\n        gameOver: true,\n        direction: [0, 0],\n        waitLength: 120, \n      });\n    }\n  \n    handleRestartGame(e) {\n      e.persist();\n      const {height, width} = this.state;\n      this.setState({\n        apple: [Math.floor((Math.random() * width)), Math.floor((Math.random() * height))],\n        head: [Math.floor((Math.random() * width)), Math.floor((Math.random() * height))],\n        points: 0,\n        direction: [0, 0],\n        timeOut: setTimeout(this.incrementMove, 1000),\n        gameOver: false,\n      });\n    }\n\n    handleHelp(e) {\n      e.persist();\n      this.setState({\n        needHelp: !this.state.needHelp,\n      })\n    }\n\n    renderGrid() {\n\n        const {apple, width, height, head} = this.state;\n        //this.snakeElement.current.state.positions\n        \n        let items = [];\n        let className = [\"grid-item\", \"grid-item filled\"]\n        let index = 0;\n        for (let i = 0; i < height; i++) {\n          for (let j = 0; j < width; j++) {\n            if (j === apple[0] && i === apple[1]) {\n              items.push(<div key={i*width + j} class={className[index]}> <div class=\"apple\"></div></div>);\n            } else if(j === head[0] && i === head[1]) {\n              items.push(<div class={className[index]}> <div class=\"snake\"></div></div>);\n            } else {\n              items.push(<div class={className[index]}>  </div>);\n            }\n            index = (++index) % 2;\n          }\n          index = (++index) % 2;\n        }\n        return items;\n    }\n\n    renderGameOver() {\n        const {gameOver} = this.state;\n        let output = []\n        if (gameOver) {\n          output.push(\n            <div>\n              {/*<div class=\"gameOver\">\n                GAME OVER!\n               </div>  */}\n              <div>\n                <button type=\"button\" \n                        onClick={this.handleRestartGame} \n                        name=\"restart-button\"\n                        class=\"redbtn\"> \n                            Try Again? \n                </button>\n              </div>\n            </div>);\n        } \n        return output;\n    }\n    \n    renderHelp() {\n      const {needHelp} = this.state;\n      let helpScreen = [];\n      if (needHelp) {\n        helpScreen.push(\n          <div>\n            <div id=\"helpScreen\" class=\"start\">\n              <div class=\"helpbtn\">\n                <button onClick={this.handleHelp}>\n                    <FontAwesomeIcon icon={faTimesCircle}/>\n                </button>\n                <span class=\"centerRules\"><b> RULES: </b></span>\n              </div>\n              <span class=\"caption\">\n                  <ul>\n                    <li>You are the white dot. {<br/>}</li> \n                    <li> Use WASD or Arrow Keys to get around. { <br/> } </li>\n                    <li> Eat red dots. {<br/>} </li>\n                    <li> Do not fall off edges. {<br/>} </li>\n                  </ul>\n              </span>\n                Good luck! {<br/>}\n            </div>\n          </div>\n        );\n      } else {\n        helpScreen.push(\n          <button onClick={this.handleHelp} font-size=\"12\">\n            Need Help?\n            {/*<FontAwesomeIcon icon={//faQuestion} />*/}\n          </button>\n        );\n      }\n      return helpScreen;\n    }\n\n    renderTitle() {\n      const {gameOver} = this.state;\n      if (!gameOver) {\n        return [<div>Now Playing:<h1 class=\"h1\">YOU ARE DEAD, but hungry </h1></div>, \"h1\"];\n      } else {\n        return[<div>{<br/>}<h1 class=\"superdead\">uh oh, you SUPER-DIED</h1></div>, \"red\"]\n      }\n    }\n\n  \n    render() {\n      const {points, highscore, direction} = this.state;\n\n      let title_parts = this.renderTitle();\n      let title = title_parts[0];\n      let theme = title_parts[1];\n      let help = this.renderHelp();\n      let items = this.renderGrid();\n      let replay_options = this.renderGameOver(); // will only appear if gameOver\n\n      return (\n        <div class = {theme}>\n          {title}\n          <div class=\"board\">\n            {items}\n          </div>\n\n          <p class= \"score\">\n              Score: {points}  Highscore: {highscore}\n          </p>\n\n          <div>\n              <Audio \n                  dir_x={direction[0]} \n                  dir_y={direction[1]} \n                  gameOver={this.state.gameOver}\n              />\n          </div>\n          {replay_options}\n          {help}\n        </div>\n      );\n    }\n  }\n\n  Board.propTypes = {\n    wd: PropTypes.number.isRequired,\n    ht: PropTypes.number.isRequired,\n  };\n\n  export default Board;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\n//import StartingScreen from './starting-screen'\nimport Board from './board'\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Board wd={20} ht={10}/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}